# ~/.bashrc for Arch Linux and Ubuntu

# This file is sourced by login shells and interactive non-login shells.  On at least
# Debian and Arch Linux, Bash is compiled with the `-DSYS_BASHRC="/etc/bash.bashrc"`
# option, which makes it source /etc/bash.bashrc first for interactive non-login shells.
# See <https://wiki.archlinux.org/index.php/Bash#Configuration_files> and
# <https://unix.stackexchange.com/q/187369>.

# FIXME: ShellCheck warnings.

# If not running interactively, don't do anything.
[[ $- != *i* ]] && return

# The GNU Privacy Guard Manual and gpg-agent(1) suggest setting and exporting GPG_TTY like
# this [1][2].  It tells gpg-agent the file name of the terminal connected to stdin, which
# is used by `pinentry-curses` (though [2] also recommends having GPG_TTY set for the
# GUI-based `pinentry` programs).  See tty(1).
# [1]: https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
# [2]: https://www.gnupg.org/documentation/manuals/gnupg/Common-Problems.html
export GPG_TTY=$(tty)

# Clear PROMPT_COMMAND.  It's set from /etc/bash.bashrc on Arch Linux.
unset PROMPT_COMMAND

# Set up fzf keybindings if fzf is installed (see https://stackoverflow.com/a/677212).
if hash fzf 2>/dev/null; then
   # Try to set up fzf's Bash key bindings using a file Arch's fzf package installs.
   [[ -f /usr/share/fzf/key-bindings.bash ]] && source /usr/share/fzf/key-bindings.bash
   # Maybe fzf was installed directly from the Git repository.  If this involved running
   # the bundled install script, there should be a `~/.fzf.bash` file.  Source that file
   # if it exists.
   [[ -f ~/.fzf.bash ]] && source ~/.fzf.bash
fi

# Source z.sh (https://github.com/rupa/z); z(1) jumps to frecent directories and it's
# faster than autojump (I haven't tried fasd, which is similar too).  This appends a
# command to PROMPT_COMMAND that's terminated with a semicolon.
if [[ -f /usr/lib/z.sh ]]; then
   . /usr/lib/z.sh
   unalias z # I use j for z.
fi

# See <https://mywiki.wooledge.org/glob> and <https://stackoverflow.com/q/17191622>.
shopt -s extglob

# Perform history expansion on the current line and insert a space, with space.  See
# bash(1).  For example, typing !!<Space> will replace the !! with the previous command.
bind Space:magic-space

# Disable XON/XOFF flow control.  See stty(1),
# http://unix.stackexchange.com/q/12107 and
# https://en.wikipedia.org/wiki/Software_flow_control.
stty -ixon

# Send ASCII DEL (0x7F) for the backspace key instead of ASCII BS (0x08).  This is some
# sort of de-facto standard and xterm doesn't follow it by default on my system.  Update:
# I'm fixing it from Xresources instead of here now.
# stty erase 

# Horrible hacks are happening here.
if [[ "$TERM" == screen* ]]; then
   # Fix Control+H in xterms that are immediately (on startup) attached to a screen
   # session started in detached mode.  Control+H erases all characters before the cursor
   # instead of just one without this.
   stty kill 
   # Fix Control+H in those xterms again.  GNU Readline's key bindings are different in
   # them for some reason: in particular, Control+H (C-h in Emacs-style notation) is bound
   # to `unix-line-discard` instead of `backward-delete-char`.  That means it kills all
   # text from the cursor to the beginning of the line instead of acting like backspace.
   # I swear it was working without this before...  maybe some upgrade broke stuff again.
   # See `help bind`, readline(3) and `info readline`.
   bind '\C-h: backward-delete-char'
fi

# Aliases and functions for interactive use {{{1
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

# Aliases for ls.
alias ls='ls --color=auto'
alias  l='ls -F'
alias la='ls -FA'
alias ll='ls -lh'

# List subdirectories (http://stackoverflow.com/a/171938).
alias lsd='ls -d */'

alias spinach='>/dev/null trans -speak en:'

# Create a new directory and change into it.  Conceptually like `mkdir -p "$1" && cd "$1"`
# but handles many subtle edge cases.  Taken from <https://unix.stackexchange.com/a/9124>.
mkcd() {
   case "$1" in
      */..|*/../) cd -- "$1";; # Doesn't make sense unless the directory already exists.
      /*/../*) (cd "${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd -- "$1";;
      /*) mkdir -p "$1" && cd "$1";;
      */../*) (cd "./${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd "./$1";;
      ../*) (cd .. && mkdir -p "${1#.}") && cd "$1";;
      *) mkdir -p "./$1" && cd "./$1";;
   esac
}

# Jump into the most "frecent" directory matching all arguments.  Normally like z(1), but
# uses fzf to select a directory when invoked without arguments.  Adapted from
# <https://github.com/junegunn/fzf/wiki/Examples#z>.
j() {
   [[ $# -gt 0 ]] && _z "$*" && return
   cd "$(_z 2>&1 | fzf --tac --no-sort | sed 's/^[0-9.]* *//')"
}

# Select a line from snippets.bash with fzf and paste the selection to stdin.  This code
# is copied and adapted from the `__fzf_history__` function in
# /usr/share/fzf/key-bindings.bash (as of fzf 0.16.8-1 from Arch's community repo,
# <https://www.archlinux.org/packages/community/x86_64/fzf/>).
__fzf_snippets__() {
   FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS" $(__fzfcmd) \
      < ~/dotfiles/misc/snippets.bash
}

# Invoke __fzf_snippets__ with Control+I (xterm is configured to send ÿ when Control+I is
# pressed, so it can be distinguished from Tab).  I just copied and adapted the code used
# in /usr/share/fzf/key-bindings.bash to set up the Control+R readline key binding.
bind '"ÿ": " \C-e\C-u$(__fzf_snippets__)\e\C-e\e^\er"'

# Aliases for humans.
alias df='df -h'
alias du='du -h'
alias free='free -h'

alias info='info --vi-keys'

alias v='$VISUAL'

# `alert` alias for use with long-running commands.  For example, `sleep 10; alert` will
# send a desktop notification after `sleep 10` is done (if a notification daemon like
# "Notify OSD" or "dunst" is running).  Adapted from Ubuntu's .bashrc.  See
# notify-send(1).
alias alert='notify-send -i "$([[ $? == 0 ]] && echo terminal || echo error)" '\
'"$(history | tail -1 | sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Get the system's local IP address (from http://stackoverflow.com/a/25851186 -- also see
# http://askubuntu.com/a/604691).
alias lanip='ip route get 1 | head -1 | cut -d " " -f7'

# Get the default gateway's (router's) IP address (from http://serverfault.com/q/31170).
gatewayip() {
   ip route | awk '/^def/{print $3}'
}

alias localip=lanip
alias internalip=lanip
alias globalip=wanip
alias externalip=wanip
alias gateip=gatewayip

# Shortcut for `git.`  Runs `git status -s` when called with no arguments, otherwise acts
# like `git`.  From https://github.com/thoughtbot/dotfiles/blob/master/zsh/functions/g.
g() {
   if [[ $# -gt 0 ]]; then
      git "$@"
   else
      git status -s
   fi
}

alias gd='git diff'
alias gg='git graph'
alias gl='git log'
alias gp='git push'
alias gds='git diff --staged'
alias gcm='git commit -m'
alias game='git commit --amend'
alias gish='git show'

alias tag='tig --all'

alias nx='git-annex'

alias pg='pass git'

alias feh='feh -.'
alias msa='mpc search any'

d() { dict "$@" |& less -FX; }

# Stuff concerning Bash's command history {{{1
shopt -s histverify

# Append new history lines from each Bash session to $HISTFILE when the shell exits,
# rather than overwriting the file with the history list.  When histappend is unset,
# running several instances of Bash at the same time will result in the new history lines
# of all but the last instance that exits to be lost.  Having histappend unset also may
# pose an additional risk of losing (part of) the history if something goes wrong while
# overwriting the file.  See bash(1) and <https://unix.stackexchange.com/a/6509>.
shopt -s histappend

HISTTIMEFORMAT='%F %T  '
# Bash sets HISTFILESIZE to this value as well and "if HISTFILESIZE is [...] a numeric
# value less than zero, the history file is not truncated" (bash(1)).
HISTSIZE=-1

# Don't save lines starting with a space character in the history.  Cf.
# <https://askubuntu.com/q/15926>.
HISTCONTROL=ignorespace

# Using this function (`PS1='$(ps1)'`) results in a marginally nicer PS1 than `PS1='\$ '`.
# The default PS1 is '[\u@\h \W]\$ ' (TODO: is this set by Bash or by Arch?).
ps1() {
   # Save the value of $? before doing anything else.
   local exit_code=$?

   # Using \[ and \] for surrounding non-printable characters doesn't work here.  See
   # <https://wiki.archlinux.org/index.php/Bash/Prompt_customization>.  We have to use
   # \001 and \002 instead.
   local gray=$'\001\e[38;5;246m\002'
   local bold=$'\001\e[1m\002'
   local reset=$'\001\e[m\002'

   local stuff_in_brackets=
   local prompt=

   # Show the last command's exit code when it's nonzero.
   if [[ $exit_code != 0 ]]; then
      # When we add nothing else to `prompt` and `\n` is the very last thing, the newline
      # gets swallowed for some reason.  Apparently we can work around this by appending
      # something inconsequential, for example `\001\002`.
      prompt+=$'\001\e[31m\002'"$exit_code"$'\001\e[m\002\n\001\002'
   fi

   # Show the username and the hostname if the current user isn't my normal user or the
   # hostname isn't "smial".
   if [[ $EUID != 1000 || $HOSTNAME != smial ]]; then
      stuff_in_brackets+='\u'$gray@$reset'\h'
   fi

   # Show the working directory if it isn't $HOME.
   if [[ $PWD != "$HOME" ]]; then
      stuff_in_brackets+="${stuff_in_brackets:+ }${PWD/$HOME/\~}"
   fi

   if [[ $stuff_in_brackets ]]; then
      prompt+="$gray[$reset$stuff_in_brackets$gray]$reset "
   fi

   # This "@P" thing is called "parameter transformation".  See bash(1) and
   # <https://stackoverflow.com/a/54265211>.  Without it, we would probably have to start
   # a new (`whoami`, `logname`, or `id`) process.
   printf %s "${prompt@P}"
}
# [1]: https://wiki.archlinux.org/index.php/Bash/Prompt_customization
# [2]: https://en.wikipedia.org/wiki/ANSI_escape_code
# [3]: https://commons.wikimedia.org/wiki/File:Xterm_color_chart.png
# [4]: https://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html

bold=$'\001\e[1m\002'
reset=$'\001\e[m\002'

PS1='$(ps1)'"$bold"'\$'"$reset "
PS2='\[\e[1m\]>\[\e[m\] '

unset bold reset

# Rules for setting the terminal title {{{1
case "$TERM" in
   xterm*) # It's an xterm.
      # Try to remove a semicolon from the end of PROMPT_COMMAND.  Then append '; ' unless
      # PROMPT_COMMAND is unset or empty.  See http://wiki.bash-hackers.org/syntax/pe.
      PROMPT_COMMAND="${PROMPT_COMMAND%;}"
      PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND; }"
      # We can safely append new commands to PROMPT_COMMAND now.
      PROMPT_COMMAND+='printf "\033]0;%s@%s %s\007" "$USER" "${HOSTNAME%%.*}"'
      PROMPT_COMMAND+=' "${PWD/#$HOME/\~}"'
      # http://stackoverflow.com/q/7316107

      # On Arch Linux and for most terminals, /etc/bash.bashrc sets PROMPT_COMMAND to:
      #    printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"
      # I'm unsetting PROMPT_COMMAND at the top of this file, but we could just keep it
      # (TODO?)

      # TODO: explain this better.  Isn't this redundant?
      show_command_in_title() # Show the currently running command in the terminal title.
      {
         case "$BASH_COMMAND" in
            *033]0*)
               # The command is trying to set the title bar as well; this is most likely
               # the execution of $PROMPT_COMMAND.  In any case nested escapes confuse the
               # terminal, so don't output them.
               ;;
            *)
               printf "\033]0;%s@%s: %s\007" "$USER" "${HOSTNAME%%.*}" "$BASH_COMMAND"
               ;;
         esac
      }
      ;;

   screen*) # It's a GNU Screen terminal.  I get 'screen.linux' when running screen from
            # inside a virtual console.
      # We could do this (http://aperiodic.net/screen/title_examples) to get information
      # about the running command in the title:
      #    PS1='\[\033k\033\\\][\u@\h \W]\$ '
      # ...but this is nicer:
      PROMPT_COMMAND="${PROMPT_COMMAND%;}"
      PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND; }"
      PROMPT_COMMAND+='printf "\033k%s@%s %s\033\\" "$USER" "${HOSTNAME%%.*}"'
      PROMPT_COMMAND+=' "${PWD/#$HOME/\~}"'
      show_command_in_title()
      {
         case "$BASH_COMMAND" in
            *033]0*)
               ;;
            *)
               printf "\033k%s@%s: %s\033\\" "$USER" "${HOSTNAME%%.*}" "$BASH_COMMAND"
               ;;
         esac
      }
      ;;

   *)
      # It's something else.
      ;;
esac # More web links:
# http://mg.pov.lt/blog/bash-prompt.html
# http://www.tldp.org/HOWTO/Xterm-Title-3.html#ss3.1
# http://www.tldp.org/HOWTO/Xterm-Title-4.html#ss4.3

# When exacly does bash receive the the DEBUG signal and execute the command?
# "If a sigspec is DEBUG, the command arg is executed after every simple command, for
# command, case command, select command, every arithmetic for command, and before the
# first command executes in a shell function." - bash(1)
trap 'show_command_in_title 2>/dev/null' DEBUG
# I don't care if these commands weren't defined: redirect to /dev/null.  This should be
# the last command in ~/.bashrc.  If there are more, the terminal title will be changed
# for each one, increasing the startup time.
# Web links:
# http://linux.die.net/Bash-Beginners-Guide/sect_12_02.html.
# http://stackoverflow.com/q/16636007
# http://stackoverflow.com/q/9268836
# http://stackoverflow.com/q/3338030
# https://wiki.archlinux.org/index.php/Color_Bash_Prompt#Different_colors_for_text_entry_and_console_output

# vim: fdm=marker
