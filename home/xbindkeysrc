# XBindKeys(1) configuration (window manager-agnostic keybindings; mostly multimedia keys)
#
# See [Xbindkeys][1], [Extra keyboard keys][1] and [Extra keyboard keys in Xorg][2] in the
# ArchWiki.  `xbindkeys --defaults` prints a default configuration file.
#
# [1]: https://wiki.archlinux.org/index.php/Xbindkeys
# [2]: https://wiki.archlinux.org/index.php/Extra_keyboard_keys
# [3]: https://wiki.archlinux.org/index.php/Extra_keyboard_keys_in_Xorg

"amixer -q set Master toggle"
   XF86AudioMute

# TODO: Exclude these notifications from Dunst's message history.  I use `-c ephemeral` to
# do that with `notify-send`, but `dunstify` doesn't seem to allow specifying a
# notification category.  We can probably use `notify-send` instead of `dunstify` in the
# future, though: see <https://github.com/dunst-project/dunst/pull/552>.
"dunstify -u low -t 2000 -r 699814432 "$(amixer set Master playback 2db- | sed -En '$s!.*\[(.*%)\].*!<small>ALSA master volume</small>\n\1!p')""
   XF86AudioLowerVolume

"dunstify -u low -t 2000 -r 699814432 "$(amixer set Master playback 2db+ | sed -En '$s!.*\[(.*%)\].*!<small>ALSA master volume</small>\n\1!p')""
   XF86AudioRaiseVolume

# Increase the audio volume by scrolling up while holding the Super key.  With a
# TrackPoint, this is much faster and more convenient than the media keys.
"dunstify -u low -t 2000 -r 699814432 "$(amixer set Master playback 1%+ | sed -En '$s!.*\[(.*%)\].*!<small>ALSA master volume</small>\n\1!p')""
   Mod4 + b:4

# Decrease the volume by scrolling down while holding the Super/Windows key.
"dunstify -u low -t 2000 -r 699814432 "$(amixer set Master playback 1%- | sed -En '$s!.*\[(.*%)\].*!<small>ALSA master volume</small>\n\1!p')""
   Mod4 + b:5

"mpc seek +5"
   XF86Forward

"mpc seek -5"
   XF86Back

"mpc next"
   XF86AudioNext

"mpc next"
   Mod4 + slash

# Like ncmpcpp.
"mpc seek 0"
   Mod4 + BackSpace

"mpc toggle"
   XF86AudioPlay

"mpc toggle"
   Mod4 + period

"mpc prev"
   XF86AudioPrev

"mpc prev"
   Mod4 + comma

# Take a screenshot using maim(1).
"f="$HOME/screenshots/$(date '+%Y%m%dT%H%M%S').png" bash -c 'maim -s -b 2 -c .843,.373,.373 --nokeyboard "$f" || maim "$f" && notify-send -u low "Screenshot saved to file://$f"'"
   Print

# Switch to or start Mutt (switches the screen session's active window and, if the window
# manager is i3, focuses workspace 2).  We need to start Mutt in an interactive shell
# (`bash -ic ...`) because it gets my password by invoking `pass`, which eventually
# results in `pinentry-curses` being used to create the dialog asking for the PIN to
# unlock my GPG key.  This dialog creation seems to fail when there is no shell or a
# non-interactive shell.  TODO: do something smarter than jumping to workspace 2 to focus
# the terminal?  See <https://i3wm.org/docs/userguide.html#_jumping_to_specific_windows>
# and <https://i3wm.org/docs/userguide.html#vim_like_marks>.
"if pgrep -u $(id -u) -x neomutt; then screen -S fullscreen -X msgwait 0 && { screen -S fullscreen -X select neomutt; screen -S fullscreen -X msgwait 5; } else screen -S fullscreen -X defdynamictitle off && { screen -S fullscreen -X screen -t neomutt bash -ic neomutt; screen -S fullscreen -X defdynamictitle on; } fi && i3-msg workspace 2"
   Mod4 + m

# Connect to my VPS on which I run Irssi and other stuff.  I have a "zirakzigil" entry in
# my hosts(5).  If an xterm with X11 window instance "zirakzigil" already exists, just
# focus that.  See <https://i3wm.org/docs/userguide.html#_focusing_moving_containers> and
# <https://i3wm.org/docs/userguide.html#_jumping_to_specific_windows>.
"[[ $(i3-msg '[instance="zirakzigil"] focus') == '[{"success":true}]' ]] || xterm -name zirakzigil -e ssh -t zirakzigil screen -x"
   Mod4 + i

# Switch to or start Neovim.
"if pgrep -u $(id -u) -x nvim; then screen -S fullscreen -X msgwait 0 && { screen -S fullscreen -X select nvim; screen -S fullscreen -X msgwait 5; } else screen -S fullscreen -X screen nvim -S; fi && i3-msg workspace 2"
   Mod4 + v

# Switch to or start ncmpcpp.
"pgrep -u $(id -u) -x ncmpcpp && screen -S fullscreen -X select - && screen -S fullscreen -X select ncmpcpp || screen -S fullscreen -X screen ncmpcpp && i3-msg workspace 2"
   Mod4 + c

"xterm -name 'floating xterm' -e 'bash -ic p'"
   Mod4 + g

# List [desktop entry files][1] using `j4-dmenu-desktop` and Rofi and launch the selected
# program.  Rofi can do this by itself (`rofi -modi drun -show`) but I use
# `j4-dmenu-desktop` to parse the desktop files for two reasons:
#
# * Rofi's matching algorithm goes *out of whack* otherwise, especially when using fuzzy
#   matching: while I type "firefox", the highest ranked match is "Signal Private
#   Messenger" until I type the "x".  Using the `-disable-history` flag doesn't fix this.
#   TODO: what's going on here?
# * `j4-dmenu-desktop` allows customizing the format used to list desktop entry files---I
#   don't think Rofi's built-in `drun` mode can do that.
#
# Unlike `i3-dmenu-desktop(1)`, both Rofi's `drun` mode and `j4-dmenu-desktop` are fast,
# though (see <https://github.com/enkore/j4-dmenu-desktop#how-much-faster-is-it>).
#
# [1]: https://wiki.archlinux.org/index.php/Desktop_entries
"j4-dmenu-desktop --display-binary --no-generic --term=xterm --usage-log=$HOME/.j4-dmenu-desktop.log --dmenu='rofi -matching fuzzy -dmenu -i -p $ -sync -theme-str "* { accent-color: @red; }"'"
   Mod4 + semicolon

# IPython is a bit slow to start (cf. `bc` and `calc`), but maybe it's still my best
# choice for doing some quick maths.  The familiar syntax is nice.  How about `ghci` or
# `dc` or `lua`, though?  Also see <https://reddit.com/comments/5z5fwh//devtocl>.
"xterm -name 'floating xterm' -e ipython --no-banner -ic 'from math import *'"
   Mod4 + u

# Run [rofi-pass](https://github.com/carnager/rofi-pass), an alternative to passmenu.
"PINENTRY_USER_DATA=gtk rofi-pass"
   Mod4 + p

# Doesn't work with `Mod4 + Escape` for some reason.  TODO: try using Space instead of
# Escape?
"rofi -modi window -show"
   Mod4 + c:66

# Lock the screen.
"lock"
   XF86ScreenSaver

# These notifications are excluded from Dunst's history based on the "ephemeral" category.
# There is associated configuration in `home/config/dunst/dunstrc` that makes this work.
"notify-send -u low -t 2000 -c ephemeral $'<small>Battery status</small>\n'"$(bat)""
   Mod4 + b

"vimsel"
   Mod4 + e

# TODO: kill this xterm when it loses focus?
"xterm -name 'floating xterm'"
   Mod4 + o

"xterm -name 'floating xterm' -geometry 180x29 -e htop"
   Mod4 + apostrophe

"notify-send -u low -t 3000 -c ephemeral "$(date +$'%A, %B %-d\n<b>%H:%M</b>')""
   Mod4 + z

# vim: ft=conf
