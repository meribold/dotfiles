# XBindKeys(1) configuration (window manager-agnostic keybindings; mostly multimedia keys)
#
# See [Xbindkeys][1], [Extra keyboard keys][1] and [Extra keyboard keys in Xorg][2] in the
# ArchWiki.  `xbindkeys --defaults` prints a default configuration file.
#
# [1]: https://wiki.archlinux.org/title/Xbindkeys
# [2]: https://wiki.archlinux.org/title/Extra_keyboard_keys
# [3]: https://wiki.archlinux.org/title/Keyboard_shortcuts#Xorg

"i3-msg 'floating enable; move position 13 68; resize set 1248 1458'"
   Mod4 + Shift + h

"i3-msg 'floating enable; move position 1293 68; resize set 1248 1458'"
   Mod4 + Shift + l

"wmctrl -r :ACTIVE: -e 0,0,-1,2560,-1"
   Mod4 + Shift + j

"wmctrl -r :ACTIVE: -e 0,-1,0,-1,1600"
   Mod4 + Shift + k

"amixer -q set Master toggle"
   XF86AudioMute

# These notifications are excluded from Dunst's message history based on the "application
# name" hzVgHJS3.  I used `-c ephemeral` to achieve the same with `notify-send` before,
# but `dunstify` doesn't seem to allow specifying a notification category.  TODO: Does
# <https://github.com/dunst-project/dunst/pull/552> mean that we can use `notify-send`
# instead of `dunstify`?
"dunstify -u low -t 2000 -a hzVgHJS3 -r 699814432 - "$(amixer set Master playback 2db- | sed -En '$s!.*\[(.*%)\].*!<small>ALSA master volume</small>\n\1!p')""
   XF86AudioLowerVolume

"dunstify -u low -t 2000 -a hzVgHJS3 -r 699814432 - "$(amixer set Master playback 2db+ | sed -En '$s!.*\[(.*%)\].*!<small>ALSA master volume</small>\n\1!p')""
   XF86AudioRaiseVolume

# Increase the audio volume by scrolling up while holding the Super key.  With a
# TrackPoint, this is much faster and more convenient than the media keys.
"dunstify -u low -t 2000 -a hzVgHJS3 -r 699814432 - "$(amixer set Master playback 1%+ | sed -En '$s!.*\[(.*%)\].*!<small>ALSA master volume</small>\n\1!p')""
   Mod4 + b:4

# Decrease the volume by scrolling down while holding the Super/Windows key.
"dunstify -u low -t 2000 -a hzVgHJS3 -r 699814432 - "$(amixer set Master playback 1%- | sed -En '$s!.*\[(.*%)\].*!<small>ALSA master volume</small>\n\1!p')""
   Mod4 + b:5

"mpc seek +5"
   XF86Forward

"mpc seek -5"
   XF86Back

"mpc next"
   XF86AudioNext

"mpc next"
   Mod4 + Shift + period

# Like ncmpcpp.
"mpc seek 0"
   Mod4 + BackSpace

"mpc toggle"
   XF86AudioPlay

"mpc toggle"
   Mod4 + Escape

"mpc prev"
   XF86AudioPrev

"mpc prev"
   Mod4 + Shift + comma

# Take a screenshot using maim(1).
"f="$HOME/screenshots/$(date '+%Y%m%dT%H%M%S').png" bash -c 'maim -s -b 2 -c .843,.373,.373 --nokeyboard "$f" || maim "$f" && notify-send -u low "Screenshot saved to file://$f"'"
   Print

# Simply using `qrencode --size=9 --margin 1 "$(xsel)" -o - | feh -` would work, but it
# makes it hard to specifically match the feh window in i3's configuration file, which I
# do to make the window float.  Using mktemp with a custom template makes the feh window
# easily identifiable; see `home/config/i3/config`.  TODO: use `xsel -b`?
"path=$(mktemp --tmpdir= qrencode.XXX.png) && { qrencode --size=9 --margin=1 "$(xsel -o)" -o "$path" && feh "$path"; rm "$path"; }"
   Mod4 + minus

"trans -speak en: <<< "$(xsel -o)""
   Mod4 + equal

# Show or create my "dropdown terminal" scratchpad.
"if [[ $(i3-msg '[instance="^scratchpad$"] scratchpad show') != '[{"success":true}]' ]]; then ~/dotfiles/misc/keybind-scripts/append-scratchpad-layout; if screen -ls scratchpad; then exec xterm -sl 0 -name scratchpad -e 'screen -x scratchpad'; else exec xterm -sl 0 -name scratchpad -e 'screen -S scratchpad'; fi; fi"
   Mod4 + grave

"[[ $(i3-msg '[class="^firefox$"] focus') == '[{"success":true}]' ]] || firefox"
   Mod4 + f

# Switch to or start NeoMutt.  The `GPG_TTY=$(tty)` variable assignment makes sure that
# the creation of the `pinentry-curses` dialog doesn't fail.  This dialog is indirectly
# created by `pass` when my NeoMutt configuration invokes it to get passwords.  For more
# details, search for `GPG_TTY` in `home/bashrc`.
"[[ $(i3-msg '[instance="^neomutt$" class="^XTerm$"] focus') == '[{"success":true}]' ]] || xterm -name neomutt -e 'GPG_TTY=$(tty) neomutt'"
   Mod4 + m

"urxvt -name 'floating xterm' -e nvim +'inoremap <C-Space> <Esc>:Snippets<CR>' +Mail +1bw +startinsert"
   Mod4 + Shift + m

"if [[ $(i3-msg '[instance="^scratchpad$"] focus') == '[{"success":true}]' ]]; then screen -S scratchpad -X screen; else ~/dotfiles/misc/keybind-scripts/append-scratchpad-layout; if screen -ls scratchpad; then xterm -sl 0 -name scratchpad -e 'screen -x scratchpad -p +'; else xterm -sl 0 -name scratchpad -e 'screen -S scratchpad'; fi; fi && sleep 0.1 && screen -S scratchpad -X stuff Ã¿"
   Mod4 + i

"if [[ $(i3-msg '[instance="^scratchpad$"] focus') == '[{"success":true}]' ]]; then screen -S scratchpad -X screen; else ~/dotfiles/misc/keybind-scripts/append-scratchpad-layout; if screen -ls scratchpad; then xterm -sl 0 -name scratchpad -e 'screen -x scratchpad -p +'; else xterm -sl 0 -name scratchpad -e 'screen -S scratchpad'; fi; fi"
   Mod4 + backslash

"if [[ $(i3-msg '[instance="^scratchpad$"] focus') == '[{"success":true}]' ]]; then screen -S scratchpad -X chdir ~/dotfiles; screen -S scratchpad -X screen; screen -S scratchpad -X chdir; else ~/dotfiles/misc/keybind-scripts/append-scratchpad-layout; if screen -ls scratchpad; then screen -S scratchpad -X chdir ~/dotfiles; screen -S scratchpad -X screen; screen -S scratchpad -X chdir; exec xterm -sl 0 -name scratchpad -e 'screen -x scratchpad -p 42'; else exec xterm -sl 0 -name scratchpad -e 'screen -S scratchpad bash -c "cd ~/dotfiles && bash"'; fi; fi"
   Mod4 + Shift + backslash

# Switch to or start Vim.
"[[ $(i3-msg '[instance="^vim$" class="^URxvt$"] focus') == '[{"success":true}]' ]] || urxvt -geometry 195x61 -b 2 -name vim -e vim -S"
   Mod4 + v

# Start or kill ncmpcpp.
"pkill -u $USER -x ncmpcpp || xterm -name ncmpcpp -e ncmpcpp"
   Mod4 + c

# This is very similar to the "Mod4 + grave" keybind above.
"if [[ $(i3-msg '[instance="^newsboat$"] scratchpad show') != '[{"success":true}]' ]]; then if screen -ls newsboat; then exec xterm -name newsboat -geometry 140x24 -e 'stty -ixon && exec screen -x newsboat'; else exec xterm -name newsboat -geometry 140x24 -e 'stty -ixon && exec screen -S newsboat newsboat'; fi; fi"
   Mod4 + Shift + n

"xterm -name 'floating xterm' -e p"
   Mod4 + g

# List [desktop entry files][1] using j4-dmenu-desktop and fzf and launch the selected
# program.  I used Rofi instead of fzf before, but fzf is faster and has superior fuzzy
# matching.
"~/dotfiles/misc/keybind-scripts/j4-fzf-desktop"
   Mod4 + Shift + semicolon
# [1]: https://wiki.archlinux.org/title/Desktop_entries

"xterm -name 'floating xterm' -geometry 120x14 -e ~/dotfiles/misc/keybind-scripts/fzf-command-runner"
   Mod4 + semicolon

# I previously used IPython here, but it's a bit slow to start compared to pretty much
# every other potential option for doing some quick maths (`bc`, `calc`, `dc`, `lua`, just
# `python`, ...).  Now I'm trying GHCi.  Also see <https://reddit.com/comments/5z5fwh>.
"[[ $(i3-msg '[instance="^ghci$"] scratchpad show') == '[{"success":true}]' ]] || xterm -name ghci -geometry 61x34 -e ghci"
   Mod4 + u

# Why not both?
"[[ $(i3-msg '[instance="^ipython$"] scratchpad show') == '[{"success":true}]' ]] || xterm -name ipython -geometry 61x34 -e ipython --no-banner"
   Mod4 + Shift + u

"PINENTRY_USER_DATA=spawn-xterm xterm -name 'floating xterm' -geometry 36x24 -e ~/dotfiles/misc/keybind-scripts/fzf-pass"
   Mod4 + y

"~/dotfiles/misc/keybind-scripts/fzf-window-switcher"
   Mod4 + space

"i3-msg [class=.] focus"
   Mod4 + Tab

# Lock the screen.
"lock"
   XF86ScreenSaver

"flock -Fn /tmp/HAB1DQ4j ~/dotfiles/misc/keybind-scripts/date-time-battery-song-notification"
   Mod4 + b

# Look on my works, ye Mighty, and despair!
"pkill -fx 'sleep 0.057891381'; sleep 0.057891381 && dunstify --close 84873362"
   Mod4 + b + Release

"vimsel"
   Mod4 + e

"~/dotfiles/misc/keybind-scripts/fzf-wiki"
   Mod4 + r

# TODO: kill this xterm when it loses focus?
"xterm -name 'floating xterm' -geometry 100x25"
   Mod4 + o

"xterm -name 'funny xterm'"
   Mod4 + x

"xterm -name 'borderless floating xterm' -geometry 178x28 -e htop"
   Mod4 + apostrophe

"xterm -name 'borderless floating xterm' -geometry 159x32 -e alsamixer"
   Mod4 + Shift + apostrophe

"i3-msg '[instance="^floating man$"] scratchpad show'"
   Mod4 + z

# Take a note by messaging myself using [signal-cli][1] via [signal-cli.bash][2].  The
# actual sending happens in the background.  The xterm that the note is typed into is
# closed without any delay.  If signal-cli encounters an error, we pop up a desktop
# notification.  TODO: how about a version that uses Vim bound to `bracketright`?
"xterm -name 'floating xterm' -geometry 80x4 -e bash -ic 'message=$(rlwrap -pcyan -S "> " -ow0 cat) && { s lukas "$message" || notify-send -u critical "signal-cli: something went wrong" & disown; }'"
   Mod4 + bracketleft
# [1]: https://github.com/AsamK/signal-cli
# [2]: https://github.com/meribold/signal-cli.bash

"~/dotfiles/misc/keybind-scripts/man 0:0p:1:1p:6:8"
   Mod4 + F1

"~/dotfiles/misc/keybind-scripts/man 2"
   Mod4 + F2

"~/dotfiles/misc/keybind-scripts/man 3:3p:3type"
   Mod4 + F3

"~/dotfiles/misc/keybind-scripts/man 4"
   Mod4 + F4

"~/dotfiles/misc/keybind-scripts/man 5"
   Mod4 + F5

"~/dotfiles/misc/keybind-scripts/man 6"
   Mod4 + F6

"~/dotfiles/misc/keybind-scripts/man 7"
   Mod4 + F7

"~/dotfiles/misc/keybind-scripts/man 8"
   Mod4 + F8

# vim: ft=conf
