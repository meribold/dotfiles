# XBindKeys(1) configuration (window manager-agnostic keybindings; mostly multimedia keys)
#
# See [Xbindkeys][1], [Extra keyboard keys][1] and [Extra keyboard keys in Xorg][2] in the
# ArchWiki.  `xbindkeys --defaults` prints a default configuration file.
#
# [1]: https://wiki.archlinux.org/index.php/Xbindkeys
# [2]: https://wiki.archlinux.org/index.php/Extra_keyboard_keys
# [3]: https://wiki.archlinux.org/index.php/Extra_keyboard_keys_in_Xorg

"amixer -q set Master toggle"
   XF86AudioMute

"amixer -q set PCM playback 2dB-"
   XF86AudioLowerVolume

"amixer -q set PCM playback 2dB+"
   XF86AudioRaiseVolume

"mpc next"
   XF86AudioNext

"mpc toggle"
   XF86AudioPlay

"mpc prev"
   XF86AudioPrev

# Take a screenshot using maim(1).
"f="$HOME/screenshots/$(date '+%Y%m%dT%H%M%S').png" bash -c 'maim -s -b 2 -c .843,.373,.373 --nokeyboard "$f" || maim "$f" && notify-send -u low "Screenshot saved to file://$f"'"
   Print

# Switch to or start Mutt (switches the screen session's active window and, if the window
# manager is i3, focuses workspace 2).  We need to start Mutt in an interactive shell
# (`bash -ic ...`) because it gets my password by invoking `pass`, which eventually
# results in `pinentry-curses` being used to create the dialog asking for the PIN to
# unlock my GPG key.  This dialog creation seems to fail when there is no shell or a
# non-interactive shell.  TODO: do something smarter than jumping to workspace 2 to focus
# the terminal?  See <https://i3wm.org/docs/userguide.html#_jumping_to_specific_windows>
# and <https://i3wm.org/docs/userguide.html#vim_like_marks>.
"pgrep -u $(id -u) -x mutt && screen -S fullscreen -X select - && screen -S fullscreen -X select mutt || { screen -S fullscreen -X defdynamictitle off && { screen -S fullscreen -X screen -t mutt bash -ic mutt; screen -S fullscreen -X defdynamictitle on; }; } && i3-msg workspace 2"
   Mod4 + m

# Switch to or start Irssi.  This is basically like the Mutt keybinding but simpler
# because no shell is started.
"pgrep -u $(id -u) -x irssi && screen -S fullscreen -X select - && screen -S fullscreen -X select irssi || screen -S fullscreen -X screen irssi && i3-msg workspace 2"
   Mod4 + i

# Switch to or start Neovim.
"pgrep -u $(id -u) -x nvim && screen -S fullscreen -X select - && screen -S fullscreen -X select nvim || screen -S fullscreen -X screen nvim -S && i3-msg workspace 2"
   Mod4 + v

# Switch to or start Newsbeuter.
"pgrep -u $(id -u) -x newsbeuter && screen -S fullscreen -X select - && screen -S fullscreen -X select newsbeuter || screen -S fullscreen -X screen newsbeuter && i3-msg workspace 2"
   Mod4 + n

# List [desktop entry files][1] using `j4-dmenu-desktop` and Rofi and launch the selected
# program.  Rofi can do this by itself (`rofi -modi drun -show`) but I use
# `j4-dmenu-desktop` to parse the desktop files for two reasons:
#
# * Rofi's matching algorithm goes *out of whack* otherwise, especially when using fuzzy
#   matching: while I type "firefox", the highest ranked match is "Signal Private
#   Messenger" until I type the "x".  Using the `-disable-history` flag doesn't fix this.
#   TODO: what's going on here?
# * `j4-dmenu-desktop` allows customizing the format used to list desktop entry files -- I
#   don't think Rofi's built-in `drun` mode can do that.
#
# Unlike `i3-dmenu-desktop(1)`, both Rofi's `drun` mode and `j4-dmenu-desktop` are fast,
# though (see <https://github.com/enkore/j4-dmenu-desktop#how-much-faster-is-it>).
#
# [1]: https://wiki.archlinux.org/index.php/Desktop_entries
"j4-dmenu-desktop --display-binary --no-generic --term=xterm --usage-log=$HOME/.j4-dmenu-desktop.log --dmenu='rofi -matching fuzzy -dmenu -i -p $ -sync -theme-str "* { accent-color: #d75f5f; }"'"
   Mod4 + u

# vim: tw=90 sts=-1 sw=3 et ft=conf
