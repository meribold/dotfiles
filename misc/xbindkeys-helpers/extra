#!/usr/bin/env bash

set -o nounset -o pipefail

# These commands are halfway between keybind and `oneliners.bash` material.  Plus, there's
# only so many keys on a keyboard.
readarray -t fzf_output < <(fzf --with-nth -1 -d :: --print-query \
                                --expect=ctrl-e,alt-enter <<'EOF'
lock
dates
background::wifail
background::ethinfo
killall xbindkeys; xbindkeys
$FIREFOX --new-tab $(gatewayip) # try to open a router's web interface
cat /sys/class/power_supply/BAT0/{energy,charge}_{now,full} 2>/dev/null
auracle outdated
for i in {1..8}; do man -k -s "$i" . | awk '{ print $1, $2 }' > "/tmp/man$i.txt"; done
i3-msg exit
i3-msg -q reload
i3-msg restart
ip address show eth0
ip address show wlan0
ip route show dev wlan0
iw wlan0 info
iw wlan0 link
systemctl suspend
systemctl poweroff
systemctl reboot
xset dpms force off # turn off the display
xrandr --output LVDS-1 --off # disable the internal display
cat /sys/class/power_supply/BAT0/status
charge_thresholds
charge_thresholds 40 60
charge_thresholds 55 60
charge_thresholds 60 80
charge_thresholds 75 80
charge_thresholds 95 100
toggle_thinklight
browse::meribold.org
browse::snapcraft.io/muccadoro/metrics
browse::https://www.fastmail.com::Fastmail
browse::file:///usr/share/doc/neomutt/manual.html
browse::wiki.meribold.org
browse::wiki.meribold.org/Lists
browse::wiki.meribold.org/rec/Words
browse::wiki.meribold.org/edit/rec/Words
browse::github.com/meribold
browse::github.com/meribold/dotfiles
browse::github.com/meribold/dotfiles/commits
browse::https://play.google.com/apps/publish::Google Play Console
evalbrowse::wiki.meribold.org/$(date -I)
background::dosbox -conf ~/.dosbox/jill.conf::Jill of the Jungle
background::NetHack
background::gimp::GIMP
background::emacs::Emacs
background::inkscape::Inkscape
background::anki::Anki
background::screenkey
background::qutebrowser
background::chromium::Chromium
pkill screenkey
xrandr
xterm::ssh bamfurlong
xterm::ssh -t bamfurlong screen -S default -DR
xterm::ssh -t bamfurlong screen -S minecraft -DR
xterm::ssh -t athrad screen -UDR
xterm::less /var/log/pacman.log
checkupdates
xwininfo
sensors
ascii
khard show lukas waymann
EOF
) || exit $?

gatewayip() {
   ip route | awk '/^def/{print $3}'
}

NetHack() {
   xterm -xrm 'XTerm*VT100.renderFont:true' -fs 13 -e nethack
}

lock() {
   nohup lock &>/dev/null &
   sleep 0.001
   if [[ $(cat /sys/class/power_supply/BAT0/status) == 'Discharging' ]]; then
      xset dpms force off
   fi
}

# A precondition of this function is $1 <= $2 (or $# == 0).
charge_thresholds() {
   if (( $# == 0 )); then
      cat /sys/class/power_supply/BAT0/charge_{start,stop}_threshold
      return
   fi
   # This can fail because it may try to set charge_start_threshold to a value bigger than
   # the current charge_stop_threshold.
   echo "$1" | sudo tee /sys/class/power_supply/BAT0/charge_start_threshold >/dev/null
   retry=$?
   # In theory this fails when trying to set charge_stop_threshold to a value smaller than
   # charge_start_threshold, but we already adjusted charge_start_threshold.  If adjusting
   # charge_start_threshold failed because the new charge_start_threshold ($1) is bigger
   # than the old charge_stop_threshold, then the new charge_stop_threshold ($2) is bigger
   # than the old charge_start_threshold, and we are fine:
   #    old charge_start_threshold <= old charge_stop_threshold < $1 <= $2
   echo "$2" | sudo tee /sys/class/power_supply/BAT0/charge_stop_threshold >/dev/null
   if (( retry )); then
      echo "$1" | sudo tee /sys/class/power_supply/BAT0/charge_start_threshold >/dev/null
   fi
}

toggle_thinklight() {
   echo $((($(cat '/sys/class/leds/tpacpi::thinklight/brightness') + 1) % 2)) |
      sudo dd status=none of='/sys/class/leds/tpacpi::thinklight/brightness'
}

key=${fzf_output[1]}

if [[ $key == alt-enter || ${#fzf_output[@]} == 2 ]]; then
   # Alt+Enter was used or there is no match.  We'll run the query.
   selection=${fzf_output[0]}
else
   selection=${fzf_output[2]}
fi

[[ $selection ]] || exit $?

if [[ $selection != *::* ]]; then
   command_type=
   selected_command=$selection
else
   command_type=${selection%%::*}
   selected_command=${selection#*::}
   selected_command=${selected_command%::*}
fi

if [[ $key == ctrl-e ]]; then
   read -rep '$ ' -i "$selected_command" selected_command
fi

if [[ $command_type == background ]]; then
   # I also tried using `disown` and `nohup`, but neither prevents programs from being
   # killed immediately when XBindKeys launches this script with `xterm -e`.
   trap '' SIGHUP
   eval "$selected_command" &
elif [[ $command_type == '' ]]; then
   output=$(eval "$selected_command" 2>&1)
elif [[ $command_type == browse ]]; then
   trap '' SIGHUP
   $BROWSER "$selected_command" &
   i3-msg '[class="^firefoxdeveloperedition$"] focus'
elif [[ $command_type == evalbrowse ]]; then
   trap '' SIGHUP
   eval '$BROWSER' "$selected_command" &
   i3-msg '[class="^firefoxdeveloperedition$"] focus'
elif [[ $command_type == xterm ]]; then
   trap '' SIGHUP
   eval 'xterm -e' "$selected_command" &
fi

if [[ $output ]]; then
   if (( $(wc -l <<< "$output") >= 14 )); then
      printf '$ %s\n%s' "$selected_command" "$output" | less
   else
      tput civis
      if [[ $key != ctrl-e ]]; then
         printf '$ %s\n' "$selected_command"
      fi
      printf '%s' "$output"
      read -rn1
   fi
fi
